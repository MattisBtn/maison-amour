Le site web du groupe Maison Amour est une vitrine élégante et conviviale pour un groupe de restauration bordelais fondé par Lucas De Castro et Clément Lechipey. L'objectif principal du site est de présenter les différents restaurants du groupe, chacun offrant une expérience gastronomique unique centrée sur le fait-maison et la convivialité. Le site vise à mettre en valeur la philosophie du groupe, qui consiste à créer des expériences culinaires mémorables dans des atmosphères chaleureuses, tout en facilitant la réservation en ligne et en informant les visiteurs sur les actualités et événements des établissements. Cette plateforme digitale doit refléter l'élégance, la qualité et la diversité des restaurants du groupe, tout en offrant une navigation intuitive et une expérience utilisateur agréable pour les amateurs de gastronomie.

      You have extensive expertise in Vue 3, Nuxt 3, TypeScript, Node.js, Vite, Vue Router, VueUse, Nuxt UI, and Tailwind CSS. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

      Code Style and Structure
      - Write clean, maintainable, and technically accurate TypeScript code.
      - Prioritize functional and declarative programming patterns; avoid using classes.
      - Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
      - Prefer Composition API <script setup> style.
      - Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.

      Nuxt 3 Specifics
      - Nuxt 3 provides auto imports, so theres no need to manually import 'ref', 'useState', or 'useRouter'.
      - For color mode handling, use the built-in '@nuxtjs/color-mode' with the 'useColorMode()' function.
      - Take advantage of VueUse functions to enhance reactivity and performance (except for color mode management).
      - Use the Server API (within the server/api directory) to handle server-side operations like database interactions, authentication, or processing sensitive data that must remain confidential.
      - use useRuntimeConfig to access and manage runtime configuration variables that differ between environments and are needed both on the server and client sides.
      - For SEO use useHead and useSeoMeta.
      - For images use <NuxtImage> or <NuxtPicture> component and for Icons use Nuxt Icons module.
      - use app.config.ts for app theme configuration.

      Fetching Data
      1. Use useFetch for standard data fetching in components that benefit from SSR, caching, and reactively updating based on URL changes. 
      2. Use $fetch for client-side requests within event handlers or when SSR optimization is not needed.
      3. Use useAsyncData when implementing complex data fetching logic like combining multiple API calls or custom caching and error handling.
      4. Set server: false in useFetch or useAsyncData options to fetch data only on the client side, bypassing SSR.
      5. Set lazy: true in useFetch or useAsyncData options to defer non-critical data fetching until after the initial render.

      Naming Conventions
      - Utilize composables, naming them as use<MyComposable>.
      - Use **PascalCase** for component file names (e.g., components/MyComponent.vue).
      - Favor named exports for functions to maintain consistency and readability.

      TypeScript Usage
      - Use TypeScript throughout; prefer interfaces over types for better extendability and merging.
      - Avoid enums, opting for maps for improved type safety and flexibility.
      - Use functional components with TypeScript interfaces.

      UI and Styling
      - Use Nuxt UI and Tailwind CSS for components and styling.
      - Implement responsive design with Tailwind CSS; use a mobile-first approach.
      
    Visual Design
    - Establish a clear visual hierarchy to guide user attention.
    - Choose a cohesive color palette that reflects the brand (ask the user for guidelines).
    - Use typography effectively for readability and emphasis.
    - Maintain sufficient contrast for legibility (WCAG 2.1 AA standard).
    - Design with a consistent style across the application.

    Interaction Design
    - Create intuitive navigation patterns.
    - Use familiar UI components to reduce cognitive load.
    - Provide clear calls-to-action to guide user behavior.
    - Implement responsive design for cross-device compatibility.
    - Use animations judiciously to enhance user experience.

    Accessibility
    - Follow WCAG guidelines for web accessibility.
    - Use semantic HTML to enhance screen reader compatibility.
    - Provide alternative text for images and non-text content.
    - Ensure keyboard navigability for all interactive elements.
    - Test with various assistive technologies.

    Performance Optimization
    - Optimize images and assets to minimize load times.
    - Implement lazy loading for non-critical resources.
    - Use code splitting to improve initial load performance.
    - Monitor and optimize Core Web Vitals (LCP, FID, CLS).

    User Feedback
    - Incorporate clear feedback mechanisms for user actions.
    - Use loading indicators for asynchronous operations.
    - Provide clear error messages and recovery options.
    - Implement analytics to track user behavior and pain points.

    Information Architecture
    - Organize content logically to facilitate easy access.
    - Use clear labeling and categorization for navigation.
    - Implement effective search functionality.
    - Create a sitemap to visualize overall structure.

    Mobile-First Design
    - Design for mobile devices first, then scale up.
    - Use touch-friendly interface elements.
    - Implement gestures for common actions (swipe, pinch-to-zoom).
    - Consider thumb zones for important interactive elements.

    Consistency
    - Develop and adhere to a design system.
    - Use consistent terminology throughout the interface.
    - Maintain consistent positioning of recurring elements.
    - Ensure visual consistency across different sections.

    Testing and Iteration
    - Conduct A/B testing for critical design decisions.
    - Use heatmaps and session recordings to analyze user behavior.
    - Regularly gather and incorporate user feedback.
    - Continuously iterate on designs based on data and feedback.

    Documentation
    - Maintain a comprehensive style guide.
    - Document design patterns and component usage.
    - Create user flow diagrams for complex interactions.
    - Keep design assets organized and accessible to the team.

    Fluid Layouts
    - Use relative units (%, em, rem) instead of fixed pixels.
    - Implement CSS Grid and Flexbox for flexible layouts.
    - Design with a mobile-first approach, then scale up.

    Media Queries
    - Use breakpoints to adjust layouts for different screen sizes.
    - Focus on content needs rather than specific devices.
    - Test designs across a range of devices and orientations.

    Images and Media
    - Use responsive images with srcset and sizes attributes.
    - Implement lazy loading for images and videos.
    - Use CSS to make embedded media (like iframes) responsive.

    Typography
    - Use relative units (em, rem) for font sizes.
    - Adjust line heights and letter spacing for readability on small screens.
    - Implement a modular scale for consistent typography across breakpoints.

    Touch Targets
    - Ensure interactive elements are large enough for touch (min 44x44 pixels).
    - Provide adequate spacing between touch targets.
    - Consider hover states for desktop and focus states for touch/keyboard.

    Performance
    - Optimize assets for faster loading on mobile networks.
    - Use CSS animations instead of JavaScript when possible.
    - Implement critical CSS for above-the-fold content.

    Content Prioritization
    - Prioritize content display for mobile views.
    - Use progressive disclosure to reveal content as needed.
    - Implement off-canvas patterns for secondary content on small screens.

    Navigation
    - Design mobile-friendly navigation patterns (e.g., hamburger menu).
    - Ensure navigation is accessible via keyboard and screen readers.
    - Consider using a sticky header for easy navigation access.

    Forms
    - Design form layouts that adapt to different screen sizes.
    - Use appropriate input types for better mobile experiences.
    - Implement inline validation and clear error messaging.

    Testing
    - Use browser developer tools to test responsiveness.
    - Test on actual devices, not just emulators.
    - Conduct usability testing across different device types.

    Stay updated with the latest responsive design techniques and browser capabilities.
    Refer to industry-standard guidelines and stay updated with latest UI/UX trends and best practices.
    